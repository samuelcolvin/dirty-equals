name: CI

on:
  push:
    branches:
      - main
    tags:
      - '**'
  pull_request:
    types: [opened, synchronize]

jobs:
  test:
    name: test ${{ matrix.python-version }} on ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu, macos]
        python-version: ['3.7', '3.8', '3.9', '3.10']
        # test 3.11-dev and pypy on ubuntu only to speed up CI, no reason why macos X pypy should fail separately
        include:
          - os: 'ubuntu'
            python-version: '3.11-dev'
          - os: 'ubuntu'
            python-version: 'pypy-3.7'
          - os: 'ubuntu'
            python-version: 'pypy-3.8'
          - os: 'ubuntu'
            python-version: 'pypy-3.9'

    runs-on: ${{ matrix.os }}-latest

    env:
      PYTHON: ${{ matrix.python-version }}
      OS: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3

    - name: set up python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - uses: actions/cache@v3
      id: cache
      with:
        path: ${{ env.pythonLocation }}
        key: ${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('pyproject.toml') }}-${{ hashFiles('requirements/tests.txt') }}

    - run: pip install -r requirements/tests.txt -r requirements/pyproject.txt
      if: '!fromJSON(steps.cache.outputs.cache-hit)'

    - run: make test

    - run: coverage xml

    - uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        env_vars: PYTHON,OS

  lint:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - uses: actions/cache@v3
      id: cache
      with:
        path: ${{ env.pythonLocation }}
        key: ${{ env.pythonLocation }}-${{ hashFiles('requirements/linting.txt') }}-${{ hashFiles('pyproject.toml') }}

    - run: pip install -r requirements/linting.txt
      if: '!fromJSON(steps.cache.outputs.cache-hit)'

    - uses: pre-commit/action@v3.0.0
      with:
        extra_args: --all-files

  docs:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: set up python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: install
      run: pip install -r requirements/docs.txt

    - name: install mkdocs-material-insiders
      if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
      run: pip install https://files.scolvin.com/${MKDOCS_TOKEN}/mkdocs-material/mkdocs_material-8.2.8+insiders.4.12.0-py3-none-any.whl
      env:
        MKDOCS_TOKEN: ${{ secrets.mkdocs_token }}

    - name: build site
      run: mkdocs build --strict

    - name: store docs site
      uses: actions/upload-artifact@v3
      with:
        name: docs
        path: site

  deploy:
    needs:
      - test
      - lint
      - docs
    if: "success() && startsWith(github.ref, 'refs/tags/')"
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: set up python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: get docs
        uses: actions/download-artifact@v3
        with:
          name: docs
          path: site

      - name: install
        run: pip install -U twine build packaging

      - name: check version
        id: check-version
        run: python <(curl -Ls https://gist.githubusercontent.com/samuelcolvin/4e1ad439c5489e8d6478cdee3eb952ef/raw/check_version.py)
        env:
          VERSION_PATH: 'dirty_equals/version.py'

      - name: build
        run: python -m build

      - run: twine check dist/*

      - name: upload to pypi
        run: twine upload dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.pypi_token }}

      - name: publish docs
        uses: JamesIves/github-pages-deploy-action@v4
        if: '!fromJSON(steps.check-version.outputs.IS_PRERELEASE)'
        with:
          branch: gh-pages
          folder: site
